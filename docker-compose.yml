version: '3'

# Volumes
##################

volumes:
  grafana_data:
    driver: local
  mysql:
    driver: local
  redis:
    driver: local

# Helathchecks
##################
  
x-op-connectivity_healthcheck: &connectivity_healthcheck
  test: ["CMD-SHELL", "/Docker-Healthchecks/internet_connectivity.sh", "--url","www.twingate.com" ]
  interval: 1hr
  timeout: 120s
  start_period: 5s
  retries: 4

x-op-file_perms_healthcheck: &file_perms_healthcheck
  test: ["CMD-SHELL", "/Docker-Healthchecks/misconfigurations.sh" ]
  interval: 1hr
  timeout: 120s
  start_period: 5s
  retries: 4

# Services
##################
services:

  # Meta-Services

  twingate:
    image: tianon/true
    depends_on: [twingate_a, twingate_b]

  media:
    image: tianon/true
    depends_on: [plex, qbitorrent, jackett]  

  metrics:
    image: tianon/true
    depends_on: [cadvisor, prometheus, grafana]

  extras:
    image: tianon/true
    depends_on: [reverse-proxy, index]

  # Virtual-network interfaces
  twingate_a:
    image: twingate/connector:1
    environment:
      - TENANT_URL=${TENANT_URL}
      - ACCESS_TOKEN=${ACCESS_TOKEN}
      - REFRESH_TOKEN=${REFRESH_TOKEN}
      - TWINGATE_LABEL_HOSTNAME=${TWINGATE_LABEL_HOSTNAME}
    healthcheck:
      <<: *connectivity_healthcheck
    restart: always

  twingate_b:
    image: twingate/connector:1
    environment:
      - TENANT_URL=${TENANT_URL}
      - ACCESS_TOKEN=${ACCESS_TOKEN_2}
      - REFRESH_TOKEN=${REFRESH_TOKEN_2}
      - TWINGATE_LABEL_HOSTNAME=${TWINGATE_LABEL_HOSTNAME}
    healthcheck:
      <<: *connectivity_healthcheck
    restart: always

  # Reverse proxy
  reverse-proxy: &reverse-proxy
    container_name: reverse-proxy
    build:
      context: ./
      dockerfile: ./reverse_proxy/.Dockerfile
    ports:
      - ${REVERSE_PROXY_PORT}:80
    links:
      - "plex"
    healthcheck:
      <<: *connectivity_healthcheck
    restart: always

  # Landing page / index
  index: &index
    container_name: index
    build:
      context: ./
      dockerfile: ./index/.Dockerfile
    ports:
      - ${INDEX_PORT}:5000
    volumes:
      - ./Docker-Service-Dashboard/:/app
    entrypoint: ["python","/app/ServiceDashboard.py"]
    healthcheck:
      <<: *connectivity_healthcheck
    restart: always


  # Torrent indexing
  jackett:
    image: lscr.io/linuxserver/jackett:latest
    container_name: jackett
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ} 
      - AUTO_UPDATE=true
      - JACKETT_PROXY_TYPE=http
      - JACKETT_PROXY_HOST=vpn
      - JACKETT_PROXY_PORT=${WIREGUARD_PORT}
      
    volumes:
      - "./jackett/config:/config"
      - "${TORRENTS}:/torrents"  
    ports:
      - ${JACKET_PORT}:9117
    healthcheck:
      <<: *connectivity_healthcheck
    restart: always


  # Torrent client with VPN & web GUI
  qbittorrent:
    image: dyonr/qbittorrentvpn
    container_name: qbittorrent
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv4.ip_forward=1
    cap_add:
      - NET_ADMIN
      - NET_RAW
      - SYS_MODULE
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ} 
      - WEBUI_PORT=8080 
      - VPN_TYPE=wireguard
      - LAN_NETWORK=192.168.3.0/24
      - VPN_ENABLED=yes
      - HEALTH_CHECK_AMOUNT=1
    volumes:
      - "./qbittorrent/config:/config"
      - "${TORRENTS}:/torrents"
      - "${DOWNLOADS}:/downloads"
    ports:
      - ${QBITTORRENT_REQUEST_PORT}:6881
      - ${QBITTORRENT_REQUEST_PORT}:6881/udp
      - ${QBITTORRENT_HTTP_PORT}:8080
    healthcheck:
      <<: *connectivity_healthcheck
    restart: always


  # Media Server
  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    network_mode: host
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ} 
      - VERSION=docker
    volumes:
      - ./plex:/config
      - "${DOWNLOADS}:/downloads"  
      - "${FILMS}:/films"
      - "${TV_SHOWS}:/tv"
    healthcheck:
      <<: *file_perms_healthcheck
    restart: always


  # Cloud Server
  owncloud:
    image: owncloud/server:${OWNCLOUD_VERSION}
    container_name: owncloud_server
    restart: always
    ports:
      - ${CLOUD_PORT}:8080
    depends_on:
      - mariadb
      - redis
    environment:
      - OWNCLOUD_DOMAIN=${OWNCLOUD_DOMAIN}
      - OWNCLOUD_TRUSTED_DOMAINS=${OWNCLOUD_TRUSTED_DOMAINS}
      - OWNCLOUD_DB_TYPE=mysql
      - OWNCLOUD_DB_NAME=owncloud
      - OWNCLOUD_DB_USERNAME=${OWNCLOUD_DB_USER}
      - OWNCLOUD_DB_PASSWORD=${OWNCLOUD_DB_PASSWORD}
      - OWNCLOUD_DB_HOST=mariadb
      - OWNCLOUD_ADMIN_USERNAME=${ADMIN_USERNAME}
      - OWNCLOUD_ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - OWNCLOUD_MYSQL_UTF8MB4=true
      - OWNCLOUD_REDIS_ENABLED=true
      - OWNCLOUD_REDIS_HOST=redis
    healthcheck:
      test: ["CMD", "/usr/bin/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - "./owncloud:/conf/config.php"
      - "${CLOUD_FILES}:/mnt/data/files/boejaker/files"

  mariadb:
    image: mariadb:10.6 
    container_name: owncloud_mariadb
    volumes:
      - mysql:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${OWNCLOUD_MYSQL_ROOT}
      - MYSQL_USER=${OWNCLOUD_DB_USER}
      - MYSQL_PASSWORD=${OWNCLOUD_DB_PASSWORD}
      - MYSQL_DATABASE=owncloud
    command: ["--max-allowed-packet=128M", "--innodb-log-file-size=64M"]
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-u", "root", "--password=owncloud"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  redis:
    image: redis:6
    container_name: owncloud_redis
    volumes:
      - redis:/data
    command: ["--databases", "1"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
  

  # Retroarch Server
  retroarch:
    image: inglebard/retroarch-web
    ports:
      - ${RETROARCH_HTTP_PORT}:80 
    volumes:
      - "${GAMES}:/var/www/html/assets/cores/ROMS"
    healthcheck:
      <<: *connectivity_healthcheck
    restart: unless-stopped

  emu:
    image: linuxserver/emulatorjs
    ports:
      - ${EMU_BACKEND_PORT}:3000
      - ${EMU_FRONTEND_PORT}:80
    volumes:
      - "${GAMES}:/data/nes/roms"
    healthcheck:
      <<: *connectivity_healthcheck
    restart: unless-stopped

  # Antivirus
  clamav:
    image: clamav/clamav
    volumes:
      - "${FILES}:/scan"
      - "/clamav/logs:/var/log/clamav"
    environment:
      - CLAMAV_EXTRA_ARGS=--cross-fs=all
    healthcheck:
      <<: *file_perms_healthcheck
    restart: always

  # Metrics
  ################

  prometheus: 
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - ${PROMETHEUS_PORT}:9090
    links:
      - cadvisor:cadvisor
      - grafana:grafana
    restart: always

  grafana: 
    image: grafana/grafana
    container_name: grafana
    ports:
      - ${GRAFANA_PORT}:3000
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=your_password
    volumes:
      - grafana_data:/var/lib/grafana
    restart: always

  cadvisor: 
    image: gcr.io/cadvisor/cadvisor
    privileged: true
    container_name: cadvisor
    user: 1000:1000 
    ports:
      - ${CADVISOR_PORT}:8080
    volumes:
      - /:/rootfs:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      <<: *file_perms_healthcheck
    restart: always


