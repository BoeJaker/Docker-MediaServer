version: '3'

services:

  # Virtual-network interfaces
  twingate:
    image: twingate/connector:1
    environment:
      - TENANT_URL=${TENANT_URL}
      - ACCESS_TOKEN=${ACCESS_TOKEN}
      - REFRESH_TOKEN=${REFRESH_TOKEN}
      - TWINGATE_LABEL_HOSTNAME=${TWINGATE_LABEL_HOSTNAME}
    restart: always

  # Reverse proxy
  reverse_proxy:
    container_name: reverse_proxy
    build:
      context: ./
      dockerfile: ./reverse_proxy/.Dockerfile
    ports:
      - 80:80

  # Torrent indexing and download
  jackett:
    image: lscr.io/linuxserver/jackett:latest
    container_name: jackett
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - AUTO_UPDATE=true #optional
      # - RUN_OPTS= #optional
      - JACKETT_PROXY_TYPE=http
      - JACKETT_PROXY_HOST=vpn
      - JACKETT_PROXY_PORT=${WIREGUARD_PORT}
    volumes:
      - ./jackett/config:/config
      - ${TORRENTS}:/torrents  # Folder for Jackett to save torrent files
    ports:
      - ${JACKET_PORT}:9117
    restart: always

  qbittorrent:
    image: dyonr/qbittorrentvpn
    # image: lscr.io/linuxserver/qbittorrent:latest
    # build:
    #   context: ./
    #   dockerfile: ./qbittorrent/.Dockerfile
    # privileged: true
    container_name: qbittorrent
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv4.ip_forward=1
    cap_add:
      - NET_ADMIN
      - NET_RAW
      - SYS_MODULE
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ} 
      - WEBUI_PORT=8080  # Port for qbittorrent web UI
      - VPN_TYPE=wireguard
      - LAN_NETWORK=192.168.0.0/16
      - VPN_ENABLED=yes
    volumes:
      - ./qbittorrent/config:/config
      - ${TORRENTS}:/torrents
      - ${DOWNLOADS}:/downloads
    ports:
      - ${QBITTORRENT_REQUEST_PORT}:6881
      - ${QBITTORRENT_REQUEST_PORT}:6881/udp
      - ${QBITTORRENT_HTTP_PORT}:8080
    restart: always


  # Media Server
  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    network_mode: host
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - VERSION=docker
      # - PLEX_CLAIM=${PLEX_CLAIM}
    # ports:
    #   - ${PLEX_HTTP_PORT}:32400 # Media Server
    #   - ${PLEX_DLNA_1_PORT}:1900 # DLNA
    #   - ${PLEX_DLNA_2_PORT}:32469 # DLNA
    #   - ${PLEX_BONJOUR_PORT}:5353 # Bonjour
    #   - ${PLEX_COMPANION_PORT}:8324 # Plex companion
    volumes:
      - ./plex:/config
      - ${DOWNLOADS}:/downloads  # Replace with your media directory
      - ${FILMS}:/films
      - ${TV_SHOWS}:/tv
    restart: always

  # Cloud Server
  owncloud:
    image: owncloud/server:${OWNCLOUD_VERSION}
    container_name: owncloud_server
    restart: always
    ports:
      - ${CLOUD_PORT}:8080
    depends_on:
      - mariadb
      - redis
    environment:
      - OWNCLOUD_DOMAIN=${OWNCLOUD_DOMAIN}
      - OWNCLOUD_TRUSTED_DOMAINS=${OWNCLOUD_TRUSTED_DOMAINS}
      - OWNCLOUD_DB_TYPE=mysql
      - OWNCLOUD_DB_NAME=owncloud
      - OWNCLOUD_DB_USERNAME=owncloud
      - OWNCLOUD_DB_PASSWORD=owncloud
      - OWNCLOUD_DB_HOST=mariadb
      - OWNCLOUD_ADMIN_USERNAME=${ADMIN_USERNAME}
      - OWNCLOUD_ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - OWNCLOUD_MYSQL_UTF8MB4=true
      - OWNCLOUD_REDIS_ENABLED=true
      - OWNCLOUD_REDIS_HOST=redis
    healthcheck:
      test: ["CMD", "/usr/bin/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - ./owncloud/config.php /conf/config.php
    # volumes:
      # - ./OP:/mnt/data
      # - ${FILES}:/mnt/data/files/boejaker/files
      # - shared-files:/mnt/data

  mariadb:
    image: mariadb:10.6 # minimum required ownCloud version is 10.9
    container_name: owncloud_mariadb
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=owncloud
      - MYSQL_USER=owncloud
      - MYSQL_PASSWORD=owncloud
      - MYSQL_DATABASE=owncloud
    command: ["--max-allowed-packet=128M", "--innodb-log-file-size=64M"]
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-u", "root", "--password=owncloud"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - mysql:/var/lib/mysql

  redis:
    image: redis:6
    container_name: owncloud_redis
    restart: always
    command: ["--databases", "1"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis:/data
  
  # Retroarch Server
  retroarch:
    image: inglebard/retroarch-web
    ports:
      - ${RETROARCH_HTTP_PORT}:80 
    volumes:
      - ${GAMES}:/var/www/html/assets/cores/ROMS

  emu:
    image: linuxserver/emulatorjs
    ports:
      - 3333:3000
      - 7778:80
    volumes:
      - ${FILES}:/data/nes/roms

  clamav:
    image: clamav/clamav
    volumes:
      - ${FILES}:/scan
      - ${CLAM_AV_LOG}:/var/log/clamav
    environment:
      - CLAMAV_EXTRA_ARGS=--cross-fs=all

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    links:
      - cadvisor:cadvisor
      - grafana:grafana

  grafana:
    image: grafana/grafana
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=your_password
    volumes:
      - grafana_data:/var/lib/grafana

  cadvisor:
    image: google/cadvisor
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro

volumes:
  grafana_data:
    driver: local
  mysql:
    driver: local
  redis:
    driver: local

