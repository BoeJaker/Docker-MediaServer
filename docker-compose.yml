version: '3'

services:

  <<: *twingate
  condition:${DEPLOY_TWINGATE}

  <<: *twingate_redundant
  condition${DEPLOY_TWINGATE}

  <<: *reverse-proxy
  condition${DEPLOY_REVERSE_PROXY}

  <<: *index
  condition${DEPLOY_INDEX}

  
  # Torrent indexing and download
  jackett:
    image: lscr.io/linuxserver/jackett:latest
    container_name: jackett
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - AUTO_UPDATE=true #optional
      # - RUN_OPTS= #optional
      - JACKETT_PROXY_TYPE=http
      - JACKETT_PROXY_HOST=vpn
      - JACKETT_PROXY_PORT=${WIREGUARD_PORT}
    volumes:
      - "./jackett/config:/config"
      - "${TORRENTS}:/torrents"  # Folder for Jackett to save torrent files
    ports:
      - ${JACKET_PORT}:9117
    restart: always

  qbittorrent:
    image: dyonr/qbittorrentvpn
    container_name: qbittorrent
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv4.ip_forward=1
    cap_add:
      - NET_ADMIN
      - NET_RAW
      - SYS_MODULE
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ} 
      - WEBUI_PORT=8080  # Port for qbittorrent web UI
      - VPN_TYPE=wireguard
      - LAN_NETWORK=192.168.3.0/24
      - VPN_ENABLED=yes
      - HEALTH_CHECK_AMOUNT=0
    volumes:
      - "./qbittorrent/config:/config"
      - "${TORRENTS}:/torrents"
      - "${DOWNLOADS}:/downloads"
    ports:
      - ${QBITTORRENT_REQUEST_PORT}:6881
      - ${QBITTORRENT_REQUEST_PORT}:6881/udp
      - ${QBITTORRENT_HTTP_PORT}:8080
    restart: always


  # Media Server
  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    network_mode: host

    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - VERSION=docker
    volumes:
      - ./plex:/config
      - "${DOWNLOADS}:/downloads"  # Replace with your media directory
      - "${FILMS}:/films"
      - "${TV_SHOWS}:/tv"

    # healthcheck:
    #   test: ["CMD-SHELL", "/healthchecks/file_permissions.sh", "/", "rw" ]
    #   interval: 24hr
    #   timeout: 120s
    #   start_period: 5s
    #   retries: 2
      
    restart: always


  # Cloud Server
  owncloud:
    image: owncloud/server:${OWNCLOUD_VERSION}
    container_name: owncloud_server
    restart: always
    ports:
      - ${CLOUD_PORT}:8080
    depends_on:
      - mariadb
      - redis
    environment:
      - OWNCLOUD_DOMAIN=${OWNCLOUD_DOMAIN}
      - OWNCLOUD_TRUSTED_DOMAINS=${OWNCLOUD_TRUSTED_DOMAINS}
      - OWNCLOUD_DB_TYPE=mysql
      - OWNCLOUD_DB_NAME=owncloud
      - OWNCLOUD_DB_USERNAME=owncloud
      - OWNCLOUD_DB_PASSWORD=owncloud
      - OWNCLOUD_DB_HOST=mariadb
      - OWNCLOUD_ADMIN_USERNAME=${ADMIN_USERNAME}
      - OWNCLOUD_ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - OWNCLOUD_MYSQL_UTF8MB4=true
      - OWNCLOUD_REDIS_ENABLED=true
      - OWNCLOUD_REDIS_HOST=redis
    healthcheck:
      test: ["CMD", "/usr/bin/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - "./owncloud:/conf/config.php"
      - "${CLOUD_FILES}:/mnt/data/files/boejaker/files"
      # - "${MOUNT_A}:/mnt/data/files/boejaker/files/mount_a"
      # - "${MOUNT_B}:/mnt/data/files/boejakerfiles/mount_b"

  mariadb:
    image: mariadb:10.6 # minimum required ownCloud version is 10.9
    container_name: owncloud_mariadb
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=owncloud
      - MYSQL_USER=owncloud
      - MYSQL_PASSWORD=owncloud
      - MYSQL_DATABASE=owncloud
    command: ["--max-allowed-packet=128M", "--innodb-log-file-size=64M"]
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-u", "root", "--password=owncloud"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - mysql:/var/lib/mysql

  redis:
    image: redis:6
    container_name: owncloud_redis
    restart: always
    command: ["--databases", "1"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis:/data
  
  # Retroarch Server
  retroarch:
    image: inglebard/retroarch-web
    ports:
      - ${RETROARCH_HTTP_PORT}:80 
    volumes:
      - "${GAMES}:/var/www/html/assets/cores/ROMS"
    restart: always

  emu:
    image: linuxserver/emulatorjs
    ports:
      - ${EMU_BACKEND_PORT}:3000
      - ${EMU_FRONTEND_PORT}:80
    volumes:
      - "${GAMES}:/data/nes/roms"
    restart: always

  clamav:
    image: clamav/clamav
    volumes:
      - "${FILES}:/scan"
      - "/clamav/logs:/var/log/clamav"
    environment:
      - CLAMAV_EXTRA_ARGS=--cross-fs=all
    restart: always

  <<: *prometheus
  condition:${DEPLOY_METRICS}

  <<: *grafana
  condition${DEPLOY_METRICS}

  <<: *cadvisor
  condition${DEPLOY_METRICS}

x-prometheus: &prometheus
  image: prom/prometheus
  container_name: prometheus
  volumes:
    - ./prometheus.yml:/etc/prometheus/prometheus.yml
  ports:
    - ${PROMETHEUS_PORT}:9090
  links:
    - cadvisor:cadvisor
    - grafana:grafana
  restart: always

x-grafana: &grafana
  image: grafana/grafana
  container_name: grafana
  ports:
    - ${GRAFANA_PORT}:3000
  environment:
    - GF_SECURITY_ADMIN_PASSWORD=your_password
  volumes:
    - grafana_data:/var/lib/grafana
  restart: always

x-cadvisor: &cadvisor
  image: gcr.io/cadvisor/cadvisor
  privileged: true
  container_name: cadvisor
  user: 10000:1000 # changed from 0:0
  ports:
    - ${CADVISOR_PORT}:8080
  volumes:
    - /:/rootfs:ro
    - /sys:/sys:ro
    - /var/lib/docker:/var/lib/docker:ro
    - /var/run/docker.sock:/var/run/docker.sock
  restart: always

# Virtual-network interfaces
x-twingate: &twingate
  image: twingate/connector:1
  environment:
    - TENANT_URL=${TENANT_URL}
    - ACCESS_TOKEN=${ACCESS_TOKEN}
    - REFRESH_TOKEN=${REFRESH_TOKEN}
    - TWINGATE_LABEL_HOSTNAME=${TWINGATE_LABEL_HOSTNAME}
  restart: always

x-twingate_redundant: &twingate_redundant
  image: twingate/connector:1
  environment:
    - TENANT_URL=${TENANT_URL}
    - ACCESS_TOKEN=${ACCESS_TOKEN_2}
    - REFRESH_TOKEN=${REFRESH_TOKEN_2}
    - TWINGATE_LABEL_HOSTNAME=${TWINGATE_LABEL_HOSTNAME}
  restart: always

# Reverse proxy
x-reverse-proxy: &reverse-proxy
  container_name: reverse-proxy
  build:
    context: ./
    dockerfile: ./reverse_proxy/.Dockerfile
  ports:
    - ${REVERSE_PROXY_PORT}:80
  restart: always
  links:
    - "plex"

# Landing page / index
x-index: &index
  container_name: index
  build:
    context: ./
    dockerfile: ./index/.Dockerfile
  ports:
    - ${INDEX_PORT}:5000
  volumes:
    - ./index/index.py:/index.py
    - ./index/templates:/templates
  entrypoint: ["python","/index.py"]
  restart: always

volumes:
  grafana_data:
    driver: local
  mysql:
    driver: local
  redis:
    driver: local



