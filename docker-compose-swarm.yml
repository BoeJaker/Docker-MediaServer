version: '3'

services:

  # Virtual-network interfaces
  twingate:
    image: twingate/connector:1
    environment:
      - TENANT_URL=https://boejaker.twingate.com
      - ACCESS_TOKEN=eyJhbGciOiJFUzI1NiIsImtpZCI6IjVVeFFxVnlXWlJzTmxVQTVEZmZqTmdmc0Z3ZnN0MDZpZExXQ0dUblpiTDgiLCJ0eXAiOiJEQVQifQ.eyJudCI6IkFOIiwiYWlkIjoiODc3NDkiLCJkaWQiOiI2NDA3MDkiLCJqdGkiOiI4YTZhNTg3NS02YWQ1LTRkZjYtYTkxOC1jM2Y2NjExZTQ0ZGEiLCJpc3MiOiJ0d2luZ2F0ZSIsImF1ZCI6ImJvZWpha2VyIiwiZXhwIjoxNjg1NzUxODk3LCJpYXQiOjE2ODU3NDgyOTcsInZlciI6IjQiLCJ0aWQiOiIyMTY5MSIsInJudyI6MTY4NTc0ODU5Nywicm5ldGlkIjoiNDA4NDcifQ.-z_jkGLd9rstA5rfLbyf4Uj247f5Jq144tBdG6fAPcuEl0sLBDR2H2LWU8mniNdhqz5Dt9f0rOiGyF177f18wg
      - REFRESH_TOKEN=QBNypZYVUcFmpQAAM9P1K2NO_osGYAIAWTZw8WcwNRuz1Ot7QjSMJ-hm-P01XKhcaUxScCVWvCkdDVaVzdxL-CR4kQ8pJ9IIapMl4RYBzYAizmRAAlKXH6PenLZHHMyvFkYmaw
      - TWINGATE_LABEL_HOSTNAME=`hostname`
    restart: always

  twingate_redundant:
    image: twingate/connector:1
    environment:
      - TENANT_URL=https://boejaker.twingate.com
      - ACCESS_TOKEN=eyJhbGciOiJFUzI1NiIsImtpZCI6IlcwTXp0MmdqMmxmazctbkFSbnUzdHoxS3pmS1ZJcUFHRFFZeURDdW9TZWciLCJ0eXAiOiJEQVQifQ.eyJudCI6IkFOIiwiYWlkIjoiODc3NDgiLCJkaWQiOiI2NDA3MDgiLCJqdGkiOiI1MjQyYjA2Yy0xZjNjLTRjMGItOWExOC04ZWFmNzg4MDhkMzEiLCJpc3MiOiJ0d2luZ2F0ZSIsImF1ZCI6ImJvZWpha2VyIiwiZXhwIjoxNjg2MTU5MzgyLCJpYXQiOjE2ODYxNTU3ODIsInZlciI6IjQiLCJ0aWQiOiIyMTY5MSIsInJudyI6MTY4NjE1NjA4Miwicm5ldGlkIjoiNDA4NDcifQ.DkBQvNg2wUxnwKzCXc9gXUp-NRWJplPfjYzifyLZEYcrfK_s8mIe7gRzR921zwiLaOGWScUyibB1du-k06hF4Q
      - REFRESH_TOKEN=L1TeWVMjtHHgpu-r8fNFs6cAcBAgWPBIuTRNjrbemNwU_ChvBU0ww5NR5xgV-URU17i0K3_sSygRmhntUbxzK1YOgooaQkRwkG2R10QoVZTTCXEivqbJ0eeCRXq20NkapWDLyA
      - TWINGATE_LABEL_HOSTNAME=`hostname`
    restart: always

  # # Reverse proxy
  # reverse-proxy:
  #   container_name: reverse-proxy
  #   build:
  #     context: ./
  #     dockerfile: ./reverse_proxy/.Dockerfile
  #   ports:
  #     - 80:80
  #   restart: always
  #   links:
  #     - "plex"

  # index:
  #   container_name: index
  #   build:
  #     context: ./
  #     dockerfile: ./index/.Dockerfile
  #   ports:
  #     - 81:5000
  #   volumes:
  #     - ./index/index.py:/index.py
  #     - ./index/templates:/templates
  #   entrypoint: ["python","/index.py"]
  #   restart: always

  
  # Torrent indexing and download
  jackett:
    image: lscr.io/linuxserver/jackett:latest
    container_name: jackett
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - AUTO_UPDATE=true #optional
      # - RUN_OPTS= #optional
      - JACKETT_PROXY_TYPE=http
      - JACKETT_PROXY_HOST=vpn
      - JACKETT_PROXY_PORT=51820
    volumes:
      - "./jackett/config:/config"
      - "./media/Seagate Wireless/torrents:/torrents"  # Folder for Jackett to save torrent files
    ports:
      - 9117:9117
    restart: always

  qbittorrent:
    image: dyonr/qbittorrentvpn
    container_name: qbittorrent
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv4.ip_forward=1
    cap_add:
      - NET_ADMIN
      - NET_RAW
      - SYS_MODULE
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC 
      - WEBUI_PORT=8080  # Port for qbittorrent web UI
      - VPN_TYPE=wireguard
      - LAN_NETWORK=192.168.3.0/24
      - VPN_ENABLED=yes
      - HEALTH_CHECK_AMOUNT=0
    volumes:
      - "./qbittorrent/config:/config"
      - "./media/Seagate Wireless/torrents:/torrents"
      - "./media/Seagate Wireless/Download:/downloads"
    ports:
      - 6881:6881
      - 6881:6881/udp
      - 8080:8080
    restart: always


  # Media Server
  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    network_mode: host

    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - VERSION=docker
    expose:
      - 32400
    volumes:
      - ./plex:/config
      - "./media/Seagate Wireless/Download:/downloads"  # Replace with your media directory
      - "./media/Seagate Wireless/Videos/Films:/films"
      - "./media/Seagate Wireless/Videos:/tv"

    # healthcheck:
    #   test: ["CMD-SHELL", "/healthchecks/file_permissions.sh", "/", "rw" ]
    #   interval: 24hr
    #   timeout: 120s
    #   start_period: 5s
    #   retries: 2
      
    restart: always


  # Cloud Server
  owncloud:
    image: owncloud/server:latest
    container_name: owncloud_server
    restart: always
    ports:
      - 8081:8080
    depends_on:
      - mariadb
      - redis
    environment:
      - OWNCLOUD_DOMAIN=localhost
      - OWNCLOUD_TRUSTED_DOMAINS=192.168.3.0/24
      - OWNCLOUD_DB_TYPE=mysql
      - OWNCLOUD_DB_NAME=owncloud
      - OWNCLOUD_DB_USERNAME=owncloud
      - OWNCLOUD_DB_PASSWORD=owncloud
      - OWNCLOUD_DB_HOST=mariadb
      - OWNCLOUD_ADMIN_USERNAME=boejaker
      - OWNCLOUD_ADMIN_PASSWORD=Â£7370Adalovelace
      - OWNCLOUD_MYSQL_UTF8MB4=true
      - OWNCLOUD_REDIS_ENABLED=true
      - OWNCLOUD_REDIS_HOST=redis
    healthcheck:
      test: ["CMD", "/usr/bin/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - "./owncloud:/conf/config.php"
      - "/home/boejaker/OWNCLOUD:/mnt/data/files/boejaker/files"
      # - "/media/boejaker/Seagate Wireless:/mnt/data/files/boejaker/files/mount_a"
      # - "/media/boejaker/New Volume:/mnt/data/files/boejakerfiles/mount_b"

  mariadb:
    image: mariadb:10.6 # minimum required ownCloud version is 10.9
    container_name: owncloud_mariadb
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=owncloud
      - MYSQL_USER=owncloud
      - MYSQL_PASSWORD=owncloud
      - MYSQL_DATABASE=owncloud
    command: ["--max-allowed-packet=128M", "--innodb-log-file-size=64M"]
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-u", "root", "--password=owncloud"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - mysql:/var/lib/mysql

  redis:
    image: redis:6
    container_name: owncloud_redis
    restart: always
    command: ["--databases", "1"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis:/data
  
  # Retroarch Server
  retroarch:
    image: inglebard/retroarch-web
    ports:
      - 7777:80 
    volumes:
      - "./media/New Volume/Games:/var/www/html/assets/cores/ROMS"
    restart: always

  emu:
    image: linuxserver/emulatorjs
    ports:
      - 3001:3000
      - 8888:80
    volumes:
      - "./media/New Volume/Games:/data/nes/roms"
    restart: always

  clamav:
    image: clamav/clamav
    volumes:
      - "/home/boejaker/OWNCLOUD:/scan/home"
      - "/media/boejaker/Seagate Wireless:/scan/mount_a"
      - "/media/boejaker/New Volume:/scan/mount_b"
      - "/clamav/logs:/var/log/clamav"
    environment:
      - CLAMAV_EXTRA_ARGS=--cross-fs=all
    restart: always

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    links:
      - cadvisor:cadvisor
      - grafana:grafana
    restart: always

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=your_password
    volumes:
      - grafana_data:/var/lib/grafana
    restart: always

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    privileged: true
    container_name: cadvisor
    user: 10000:1000 # changed from 0:0
    ports:
      - 8083:8080
    volumes:
      - /:/rootfs:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always

volumes:
  grafana_data:
    driver: local
  mysql:
    driver: local
  redis:
    driver: local



